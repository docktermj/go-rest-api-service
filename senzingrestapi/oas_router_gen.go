// Code generated by ogen, DO NOT EDIT.

package senzingrestapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "GET":
					s.handleRootRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "GET")
				}

				return
			}
			switch elem[0] {
			case 'a': // Prefix: "attribute-types"
				if l := len("attribute-types"); len(elem) >= l && elem[0:l] == "attribute-types" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAttributeTypesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "attributeCode"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetAttributeTypeRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'b': // Prefix: "bulk-data/"
				if l := len("bulk-data/"); len(elem) >= l && elem[0:l] == "bulk-data/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "analyze"
					if l := len("analyze"); len(elem) >= l && elem[0:l] == "analyze" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAnalyzeBulkRecordsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'l': // Prefix: "load"
					if l := len("load"); len(elem) >= l && elem[0:l] == "load" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleLoadBulkRecordsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'c': // Prefix: "configs/"
				if l := len("configs/"); len(elem) >= l && elem[0:l] == "configs/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "active"
					if l := len("active"); len(elem) >= l && elem[0:l] == "active" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetActiveConfigRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 't': // Prefix: "template"
					if l := len("template"); len(elem) >= l && elem[0:l] == "template" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetTemplateConfigRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'd': // Prefix: "data-sources"
				if l := len("data-sources"); len(elem) >= l && elem[0:l] == "data-sources" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetDataSourcesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleAddDataSourcesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "dataSourceCode"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetDataSourceRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/records"
						if l := len("/records"); len(elem) >= l && elem[0:l] == "/records" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAddRecordWithReturnedRecordIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "recordId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteRecordRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetRecordRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleAddRecordRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "entity"
									if l := len("entity"); len(elem) >= l && elem[0:l] == "entity" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetEntityByRecordIdRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'h': // Prefix: "how"
											if l := len("how"); len(elem) >= l && elem[0:l] == "how" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleHowEntityByRecordIDRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'w': // Prefix: "why"
											if l := len("why"); len(elem) >= l && elem[0:l] == "why" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWhyEntityByRecordIDRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'r': // Prefix: "reevaluate"
									if l := len("reevaluate"); len(elem) >= l && elem[0:l] == "reevaluate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleReevaluateRecordRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							}
						}
					}
				}
			case 'e': // Prefix: "entit"
				if l := len("entit"); len(elem) >= l && elem[0:l] == "entit" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ies"
					if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleSearchEntitiesByGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "entityId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetEntityByEntityIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "how"
								if l := len("how"); len(elem) >= l && elem[0:l] == "how" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleHowEntityByEntityIDRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'w': // Prefix: "why"
								if l := len("why"); len(elem) >= l && elem[0:l] == "why" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleWhyEntityByEntityIDRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'y': // Prefix: "y-"
					if l := len("y-"); len(elem) >= l && elem[0:l] == "y-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "networks"
						if l := len("networks"); len(elem) >= l && elem[0:l] == "networks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFindEntityNetworkRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'p': // Prefix: "paths"
						if l := len("paths"); len(elem) >= l && elem[0:l] == "paths" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleFindEntityPathRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'h': // Prefix: "heartbeat"
				if l := len("heartbeat"); len(elem) >= l && elem[0:l] == "heartbeat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHeartbeatRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'l': // Prefix: "license"
				if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleLicenseRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'r': // Prefix: "reevaluate-entity"
				if l := len("reevaluate-entity"); len(elem) >= l && elem[0:l] == "reevaluate-entity" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleReevaluateEntityRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 's': // Prefix: "s"
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "arch-entities"
						if l := len("arch-entities"); len(elem) >= l && elem[0:l] == "arch-entities" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSearchEntitiesByPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'r': // Prefix: "rver-info"
						if l := len("rver-info"); len(elem) >= l && elem[0:l] == "rver-info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetServerInfoRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				case 'p': // Prefix: "pecifications/open-api"
					if l := len("pecifications/open-api"); len(elem) >= l && elem[0:l] == "pecifications/open-api" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleOpenApiSpecificationRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleVersionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'i': // Prefix: "irtual-entities"
					if l := len("irtual-entities"); len(elem) >= l && elem[0:l] == "irtual-entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetVirtualEntityByRecordIdsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'w': // Prefix: "why/"
				if l := len("why/"); len(elem) >= l && elem[0:l] == "why/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "entities"
					if l := len("entities"); len(elem) >= l && elem[0:l] == "entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleWhyEntitiesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'r': // Prefix: "records"
					if l := len("records"); len(elem) >= l && elem[0:l] == "records" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleWhyRecordsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "GET":
					r.name = "Root"
					r.operationID = "root"
					r.pathPattern = "/"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case 'a': // Prefix: "attribute-types"
				if l := len("attribute-types"); len(elem) >= l && elem[0:l] == "attribute-types" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetAttributeTypes"
						r.operationID = "getAttributeTypes"
						r.pathPattern = "/attribute-types"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "attributeCode"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetAttributeType
							r.name = "GetAttributeType"
							r.operationID = "getAttributeType"
							r.pathPattern = "/attribute-types/{attributeCode}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'b': // Prefix: "bulk-data/"
				if l := len("bulk-data/"); len(elem) >= l && elem[0:l] == "bulk-data/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "analyze"
					if l := len("analyze"); len(elem) >= l && elem[0:l] == "analyze" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: AnalyzeBulkRecords
							r.name = "AnalyzeBulkRecords"
							r.operationID = "analyzeBulkRecords"
							r.pathPattern = "/bulk-data/analyze"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'l': // Prefix: "load"
					if l := len("load"); len(elem) >= l && elem[0:l] == "load" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: LoadBulkRecords
							r.name = "LoadBulkRecords"
							r.operationID = "loadBulkRecords"
							r.pathPattern = "/bulk-data/load"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'c': // Prefix: "configs/"
				if l := len("configs/"); len(elem) >= l && elem[0:l] == "configs/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "active"
					if l := len("active"); len(elem) >= l && elem[0:l] == "active" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetActiveConfig
							r.name = "GetActiveConfig"
							r.operationID = "getActiveConfig"
							r.pathPattern = "/configs/active"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 't': // Prefix: "template"
					if l := len("template"); len(elem) >= l && elem[0:l] == "template" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetTemplateConfig
							r.name = "GetTemplateConfig"
							r.operationID = "getTemplateConfig"
							r.pathPattern = "/configs/template"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'd': // Prefix: "data-sources"
				if l := len("data-sources"); len(elem) >= l && elem[0:l] == "data-sources" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "GetDataSources"
						r.operationID = "getDataSources"
						r.pathPattern = "/data-sources"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "AddDataSources"
						r.operationID = "addDataSources"
						r.pathPattern = "/data-sources"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "dataSourceCode"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetDataSource"
							r.operationID = "getDataSource"
							r.pathPattern = "/data-sources/{dataSourceCode}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/records"
						if l := len("/records"); len(elem) >= l && elem[0:l] == "/records" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "AddRecordWithReturnedRecordId"
								r.operationID = "addRecordWithReturnedRecordId"
								r.pathPattern = "/data-sources/{dataSourceCode}/records"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "recordId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteRecord"
									r.operationID = "deleteRecord"
									r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = "GetRecord"
									r.operationID = "getRecord"
									r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = "AddRecord"
									r.operationID = "addRecord"
									r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "entity"
									if l := len("entity"); len(elem) >= l && elem[0:l] == "entity" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetEntityByRecordId"
											r.operationID = "getEntityByRecordId"
											r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}/entity"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'h': // Prefix: "how"
											if l := len("how"); len(elem) >= l && elem[0:l] == "how" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: HowEntityByRecordID
													r.name = "HowEntityByRecordID"
													r.operationID = "howEntityByRecordID"
													r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}/entity/how"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										case 'w': // Prefix: "why"
											if l := len("why"); len(elem) >= l && elem[0:l] == "why" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WhyEntityByRecordID
													r.name = "WhyEntityByRecordID"
													r.operationID = "whyEntityByRecordID"
													r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}/entity/why"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'r': // Prefix: "reevaluate"
									if l := len("reevaluate"); len(elem) >= l && elem[0:l] == "reevaluate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: ReevaluateRecord
											r.name = "ReevaluateRecord"
											r.operationID = "reevaluateRecord"
											r.pathPattern = "/data-sources/{dataSourceCode}/records/{recordId}/reevaluate"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					}
				}
			case 'e': // Prefix: "entit"
				if l := len("entit"); len(elem) >= l && elem[0:l] == "entit" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ies"
					if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "SearchEntitiesByGet"
							r.operationID = "searchEntitiesByGet"
							r.pathPattern = "/entities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "entityId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetEntityByEntityId"
								r.operationID = "getEntityByEntityId"
								r.pathPattern = "/entities/{entityId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "how"
								if l := len("how"); len(elem) >= l && elem[0:l] == "how" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: HowEntityByEntityID
										r.name = "HowEntityByEntityID"
										r.operationID = "howEntityByEntityID"
										r.pathPattern = "/entities/{entityId}/how"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'w': // Prefix: "why"
								if l := len("why"); len(elem) >= l && elem[0:l] == "why" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: WhyEntityByEntityID
										r.name = "WhyEntityByEntityID"
										r.operationID = "whyEntityByEntityID"
										r.pathPattern = "/entities/{entityId}/why"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'y': // Prefix: "y-"
					if l := len("y-"); len(elem) >= l && elem[0:l] == "y-" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "networks"
						if l := len("networks"); len(elem) >= l && elem[0:l] == "networks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: FindEntityNetwork
								r.name = "FindEntityNetwork"
								r.operationID = "findEntityNetwork"
								r.pathPattern = "/entity-networks"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'p': // Prefix: "paths"
						if l := len("paths"); len(elem) >= l && elem[0:l] == "paths" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: FindEntityPath
								r.name = "FindEntityPath"
								r.operationID = "findEntityPath"
								r.pathPattern = "/entity-paths"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'h': // Prefix: "heartbeat"
				if l := len("heartbeat"); len(elem) >= l && elem[0:l] == "heartbeat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: Heartbeat
						r.name = "Heartbeat"
						r.operationID = "heartbeat"
						r.pathPattern = "/heartbeat"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'l': // Prefix: "license"
				if l := len("license"); len(elem) >= l && elem[0:l] == "license" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: License
						r.name = "License"
						r.operationID = "license"
						r.pathPattern = "/license"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'r': // Prefix: "reevaluate-entity"
				if l := len("reevaluate-entity"); len(elem) >= l && elem[0:l] == "reevaluate-entity" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: ReevaluateEntity
						r.name = "ReevaluateEntity"
						r.operationID = "reevaluateEntity"
						r.pathPattern = "/reevaluate-entity"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "s"
				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "arch-entities"
						if l := len("arch-entities"); len(elem) >= l && elem[0:l] == "arch-entities" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SearchEntitiesByPost
								r.name = "SearchEntitiesByPost"
								r.operationID = "searchEntitiesByPost"
								r.pathPattern = "/search-entities"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'r': // Prefix: "rver-info"
						if l := len("rver-info"); len(elem) >= l && elem[0:l] == "rver-info" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetServerInfo
								r.name = "GetServerInfo"
								r.operationID = "getServerInfo"
								r.pathPattern = "/server-info"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'p': // Prefix: "pecifications/open-api"
					if l := len("pecifications/open-api"); len(elem) >= l && elem[0:l] == "pecifications/open-api" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: OpenApiSpecification
							r.name = "OpenApiSpecification"
							r.operationID = "openApiSpecification"
							r.pathPattern = "/specifications/open-api"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'v': // Prefix: "v"
				if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "ersion"
					if l := len("ersion"); len(elem) >= l && elem[0:l] == "ersion" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: Version
							r.name = "Version"
							r.operationID = "version"
							r.pathPattern = "/version"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'i': // Prefix: "irtual-entities"
					if l := len("irtual-entities"); len(elem) >= l && elem[0:l] == "irtual-entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetVirtualEntityByRecordIds
							r.name = "GetVirtualEntityByRecordIds"
							r.operationID = "getVirtualEntityByRecordIds"
							r.pathPattern = "/virtual-entities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'w': // Prefix: "why/"
				if l := len("why/"); len(elem) >= l && elem[0:l] == "why/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "entities"
					if l := len("entities"); len(elem) >= l && elem[0:l] == "entities" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: WhyEntities
							r.name = "WhyEntities"
							r.operationID = "whyEntities"
							r.pathPattern = "/why/entities"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "records"
					if l := len("records"); len(elem) >= l && elem[0:l] == "records" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: WhyRecords
							r.name = "WhyRecords"
							r.operationID = "whyRecords"
							r.pathPattern = "/why/records"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
